<?php

// PHP_VERSION_ID is available as of PHP 5.2.7, if our
// version is lower than that, then emulate it
if (!defined('PHP_VERSION_ID')) {
    $version = explode('.', PHP_VERSION);

    define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));
}

/**
 * Implementation of hook_permission.
 * Valid permissions for this module
 * @return array An array of valid permissions for the iform module
 */
function species_packages_permission() {
  $retVal = array(
    'admin species packages' => array( 'title' => t('Administer species packages settings') ),
    'define species packages' => array( 'title' => t('Can define species packages') ),
    'allocate species packages' => array( 'title' => t('Can select species packages to be used on data entry forms') ),
    'modify species packages allocations' => array( 'title' => t('Can modify which species packages are used by a user, after initial selection') ),
    'assign species packages role' => array( 'title' => t('Can assign the role to users which indicates completion of training') )
  );
  return $retVal;

} // function species_packages_permission()

/**
 * Implementation of hook_menu.
 */
function species_packages_menu() {
  $items = array();
  // assume that the Iform config items exist, as this module dependant on it.
  $items['admin/config/iform/species_packages_settings'] = array(
    'title' => 'Species Package Settings',
    'description' => 'The general settings for the Species Package module.',
    'page callback' => 'species_packages_settings',
    'access arguments' => array('admin species packages'),
    'weight' => 0
  );
  $items['admin/config/iform/species_packages_mappings'] = array(
    'title' => 'Species Package mappings',
    'description' => 'Define the Species Package mappings, which are used in the IForm based forms.',
    'page callback' => 'species_packages_packages',
    'access arguments' => array('define species packages'),
    'weight' => 0
  );
  return $items;
}


/**
 * Menu callback that generates a page which allows settings to be specified.
 */
function species_packages_settings() {
  module_load_include('inc', 'species_packages', 'species_packages.admin');
  $form = drupal_get_form('species_packages_settings_form');
  return $form;
}

/**
 * Menu callback that generates a page which allows the species package mappings to be specified.
 */
function species_packages_packages() {
  if (!iform_check_helper_config_exists()) {
    drupal_set_message(check_plain(t("Please create the file helper_config.php in the !path folder on the server.",
      array('!path' => iform_client_helpers_path()))), 'warning');
    return t('');
  }
  module_load_include('inc', 'species_packages', 'species_packages.admin');
  $form = drupal_get_form('species_packages_package_form');
  require_once iform_client_helpers_path() . 'data_entry_helper.php';
  handle_resources();
  return $form;
}

/**
 * Utility function to retrieve the Species Package registered for a
 * User/Survey combination
 */
function species_packages_get_packages($uid, $survey)
{
	$data = variable_get('species_packages_'.($uid), false);
	if($data === false || $data == '') return false;
	$data = json_decode($data);
	if(!is_array($data)) return false;
	$packageList = array();
	foreach($data as $package) {
		$package = explode(':',$package);
		if($package[0] == $survey)
			$packageList[] = $package[1];
	}
	return $packageList;
}

/**
 * Utility function to retrieve the list of taxon IDs in the Species Package
 * registered for a User/Survey combination
 */
function species_packages_get_species($uid, $survey, $package)
{
	$packages = species_packages_get_packages($uid, $survey);
	if($packages === false || count($packages) == 0) return false;
	if(!in_array($package, $packages)) return false;
	$r = array();
	$species = db_query('SELECT indicia_taxa_taxon_list_id, taxon, common FROM {species_packages_species} WHERE species_package_sid = :islid ORDER BY roworder', array(':islid' => ($package)));
	foreach ($species as $taxon)
		$r[] = $taxon->indicia_taxa_taxon_list_id;
	return $r;
}

/**
 * Utility function to retrieve the Occurrence Attribute ID assigned to a
 * taxon in the Species Package registered for a User/Survey combination
 */
function species_packages_get_species_attribute($uid, $survey, $package, $ttlid)
{
	$packages = species_packages_get_packages($uid, $survey);
	if($packages === false || count($packages) == 0) return false;
	if(!in_array($package, $packages)) return false;
	$species = db_query('SELECT indicia_occurrence_attribute_id FROM {species_packages_species} '.
							'WHERE species_package_sid = :islid '.
							'AND indicia_taxa_taxon_list_id = :ittlid',
						array(':islid' => ($package), ':ittlid' => $ttlid));
	foreach ($species as $taxon)
		return $taxon->indicia_occurrence_attribute_id;
	return false;
}

/**
 * Utility function to retrieve the name of a Species Package
  */
function species_packages_get_name($package)
{
	$r = array();
	$packages = db_query('SELECT * FROM {species_packages} WHERE sid = :islid', array(':islid' => ($package)));
	foreach ($packages as $package)
		$r[] = $package->package_name;
	return $r[0];
}

/**
 * Implementation of hook_user_profile_form_alter.
 * Build Additional Form elements to allow a user to choose the Species Packages
 * for the surveys.
 */
function species_packages_form_user_profile_form_alter(&$form, &$form_state) {
    // might be viewing for another user, so dig out the user ID.
    $account = $form['#user']; // the person the record applies to
    global $user; // the person looking at the record

    iform_load_helpers(array('data_entry_helper'));
    $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
    if (isset($form['field_location']))
      $lang = $form['field_location']['#language'];
    else 
      $lang = LANGUAGE_NONE; // default undefined

  	if ($form['#user_category'] == 'account') {
		$form['#validate'][] = 'species_packages_user_profile_form_validate';
		$form['#submit'][] = 'species_packages_user_profile_form_submit';
		if($account->uid != 1 && user_access('assign species packages role', $user)) {
	    	$form['species_mappings_training'] = array(
    	   		'#type' => 'fieldset',
        		'#title' => t('Training'),
	        	'#weight' => 4
    		);
  			$form['species_mappings_training']['assign-role'] = array(
  				'#type' => 'checkbox',
	  			'#value' => user_access('allocate species packages', $account),
				'#title' => t('Tick if this person has been trained'),
				'#description' => t('After ticking or unticking this field, please save the change using the Save button at the bottom of the page. Ticking this field allows the user to choose their species package.')
			);
			$form['species_mappings_training']['deassign-role'] = array(
  				'#type' => 'hidden',
	  			'#value' => 'Yes'
			);
		}

	    if(variable_get('species_packages_setting_active') && variable_get('species_packages_setting_active') != '' &&
				user_access('allocate species packages', $account)) {
			$form['species_mappings'] = array(
	    	   	'#type' => 'fieldset',
	        	'#title' => t('Species Package Selection'),
		        '#weight' => 5
	    	);
			$rows = data_entry_helper::get_population_data(array(
	 			'table' => 'survey',
	 			'extraParams' => $readAuth + array('website_id' => variable_get('indicia_website_id', '')),
				'nocache' => true
			));
			$options = array();
			foreach ($rows as $row) {
	  			$results = db_query('SELECT * FROM {species_packages} WHERE indicia_survey_id = :ISID ORDER BY sid', array(':ISID' => $row['id']));
	    		foreach ($results as $result) {
	 				$description = array();
				  	$species = db_query('SELECT indicia_taxa_taxon_list_id, taxon, common FROM {species_packages_species} WHERE species_package_sid = :islid ORDER BY roworder', array(':islid' => ($result->sid)));
					foreach ($species as $taxon)
						$description[] = ($taxon->common != null && $taxon->common != '' ? $taxon->common : '<i>'.$taxon->taxon.'</i>');
	   				$options[$row['id'].':'.($result->sid)] = '&quot;'.$result->package_name.'&quot; (&quot;'.$row['title'].'&quot;) - Species : '.implode(', ', $description);
	  			} 
	  		}

			$defaults = json_decode(variable_get('species_packages_'.($account->uid), '[]'));
			if(count($options) > 0) {
	  			if(user_access('modify species packages allocations', $user)) {
					$form['species_mappings']['species-packages-pick-multi'] = array(
							'#type' => 'checkboxes',
							'#title' => t('Species Package Allocation'),
							'#default_value' => $defaults,
							'#options' => $options,
 							'#description' => t('Select Species Packages(s) for the user. Clearing all choices will allow the user to reselect a species package themselves. Remember to save any changes using the Save button at the bottom of the page.'),
					);	  			
				} else if($defaults === false || $defaults == '' || count($defaults) == 0) {
	  				$form['species_mappings']['species-packages-pick'] = array(
							'#title' => t('Species Package Allocation'),
	  						'#type' => 'radios',
	 						'#options' => $options,
 							'#description' => t('Select your Species Package. You can only choose one. If you wish change this selection after saving, or add additional Species Packages, please contact your Hub Administrator. Remember to save any selection using the Save button at the bottom of the page.'),
					);
				} else if(count($defaults) == 1) {
					$form['species_mappings']['message'] = array(
	       				'#markup' => '<p>'.'You have chosen : '.$options[$defaults[0]].'.</p><p>If you wish to change this selection, or add additional Species Packages, please contact your Hub Administrator.'.'</p>'
			    	);
			    } else {
			    	$list = array();
					foreach($defaults as $default)
						$list[] = $options[$default];
					$form['species_mappings']['message'] = array(
	       				'#markup' => '<p>'.'You have either chosen or been assigned the following list of Species Packages. If you wish to change this list, please contact your Hub Administrator.'.'</p><ul><li>'.
	       					implode('</li><li>',$list).'</li></ul>'
			    	);
			    }
			} else
				$form['species_mappings']['message'] = array(
	       			'#markup' => '<p>'.'There are currently no Species Packages available.'.'</p>'
			   	);
	    }
	}
    handle_resources();
}

/** 
 * Implement hook_validate.
 * Checks the Species Package selections are valid.
 * @param array $form 		
 * @param array $form_state
 */
function species_packages_user_profile_form_validate($form, $form_state) {
	// Possible checks?
	// Copy inputs to values?
}

/** 
 * Implement hook_submit.
 * Submit the Species Package selections.
 * @param array $form 		
 * @param array $form_state
 */
function species_packages_user_profile_form_submit($form, &$form_state) {
	// TODO move inputs to values..
    $account = $form['#user'];
    $data = '';
    $role = user_role_load_by_name(variable_get('species_packages_setting_training_role'));

	$query = db_query("SELECT count(*) as count FROM {users_roles} WHERE  uid = :uid AND rid = :rid", array(':uid' => $account->uid, ':rid' => $role->rid));
	$row = $query->fetchObject();

    if(isset($form_state["input"]["assign-role"])) {
    	if($row->count == 0)
	        db_insert('users_roles')
    	    	->fields(array('uid', 'rid'))
        		->values(array('uid' => $account->uid, 'rid' => $role->rid))
				->execute();
    } else if(isset($form_state["input"]["deassign-role"])) {
		db_delete('users_roles')
			->condition('uid', $account->uid)
			->condition('rid', $role->rid)
			->execute();
		variable_set('species_packages_'.($account->uid), '');
		return;
	}

	if(isset($form_state["input"]['species-packages-pick'])) {
		$data = json_encode(array($form_state["input"]['species-packages-pick']));
		variable_set('species_packages_'.($account->uid), $data);
	} else if(isset($form_state["input"]['species-packages-pick-multi'])) {
		$data = json_encode(array_filter(array_values($form_state["input"]['species-packages-pick-multi'])));
		variable_set('species_packages_'.($account->uid), $data);
	}
}
